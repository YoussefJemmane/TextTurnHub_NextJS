generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  email_verified_at DateTime?
  password          String
  remember_token    String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  buyerProfile          BuyerProfile? // Changed from userProfile
  companyProfile        CompanyProfile?
  artisanProfile        ArtisanProfile?
  roles                 UserRole[]
  permissions           UserPermission[]
  cartItems             CartItem[]
  wasteExchangeRequests WasteExchange[]  @relation("WasteExchangeRequester") // Added this line
  orders                Order[]
}

// Role and Permission Models (similar to Spatie)
model Role {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  guard_name String   @default("web")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  guard_name String   @default("web")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  users UserPermission[]
  roles RolePermission[]
}

// Many-to-Many Relations for Roles and Permissions
model UserRole {
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id Int

  @@id([user_id, role_id])
}

model UserPermission {
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  permission_id Int

  @@id([user_id, permission_id])
}

model RolePermission {
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id       Int
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  permission_id Int

  @@id([role_id, permission_id])
}

// Profile Models
model BuyerProfile {
  id                        Int      @id @default(autoincrement())
  user_id                   String   @unique
  bio                       String?  @db.Text
  location                  String?
  interests                 String?  @db.Text
  sustainability_importance String?
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model CompanyProfile {
  id           Int      @id @default(autoincrement())
  user_id      String   @unique
  company_name String
  company_size String?
  waste_types  String?  @db.Text
  industry     String?
  description  String?  @db.Text
  location     String?
  website      String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  textileWastes TextileWaste[]
}

model ArtisanProfile {
  id                 Int      @id @default(autoincrement())
  user_id            String   @unique
  artisan_specialty  String?
  artisan_experience String?
  materials_interest String?  @db.Text
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  products Product[]
}

// Textile Waste and Exchange Models
model TextileWaste {
  id                     Int      @id @default(autoincrement())
  company_profile_id     Int
  title                  String
  description            String?  @db.Text
  waste_type             String
  material_type          String
  quantity               Decimal  @db.Decimal(10, 2)
  unit                   String
  condition              String?
  color                  String?
  composition            String?
  minimum_order_quantity Decimal? @db.Decimal(10, 2)
  price_per_unit         Decimal? @db.Decimal(10, 2)
  location               String?
  availability_status    String   @default("available")
  images                 String?  @db.LongText // Changed to LongText for larger JSON strings
  sustainability_metrics String?  @db.Text
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  // Relations
  companyProfile CompanyProfile  @relation(fields: [company_profile_id], references: [id], onDelete: Cascade)
  wasteExchanges WasteExchange[]
}

model WasteExchange {
  id               Int       @id @default(autoincrement())
  textile_waste_id Int
  requester_id     String // Changed from Int to String to match User.id
  quantity         Decimal   @db.Decimal(10, 2)
  status           String    @default("pending") // pending, accepted, rejected, completed, cancelled
  request_message  String?   @db.Text
  response_message String?   @db.Text
  price            Decimal?  @db.Decimal(10, 2)
  exchange_date    DateTime?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  city             String    @db.Text

  // Relations
  textileWaste TextileWaste @relation(fields: [textile_waste_id], references: [id], onDelete: Cascade)
  requester    User         @relation("WasteExchangeRequester", fields: [requester_id], references: [id], onDelete: Cascade)
}

// Product Model
model Product {
  id                 Int      @id @default(autoincrement())
  artisan_profile_id Int
  name               String
  description        String?  @db.Text
  category           String?
  price              Decimal  @db.Decimal(10, 2)
  stock              Int      @default(0)
  unit               String?
  color              String?
  material           String?
  image              String?  @db.LongText // Changed to LongText for base64 images
  sales_count        Int      @default(0)
  is_featured        Boolean  @default(false)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  // Relations
  artisanProfile ArtisanProfile @relation(fields: [artisan_profile_id], references: [id], onDelete: Cascade)
  cartItems      CartItem[]
  orderItems     OrderItem[]
}

// Cart Model
model CartItem {
  id         String   @id @default(cuid())
  userId     String // This references the User ID
  productId  Int
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

// Order Models
model Order {
  id            String   @id @default(cuid())
  userId        String
  status        String   @default("pending") // pending, confirmed, processing, ready_for_pickup, completed, cancelled
  totalAmount   Decimal  @db.Decimal(10, 2)
  paymentMethod String   @default("cash_on_delivery")
  pickupAddress String?  @db.Text
  contactNumber String?
  notes         String?  @db.Text
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
